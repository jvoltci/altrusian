"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[857],{6857:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});var o=t(5155),r=t(2115),a=t(3264),s=t(7431);function i(e){let{active:n}=e,t=(0,r.useRef)(null),i=(0,r.useRef)(n);return(0,r.useEffect)(()=>{i.current=n},[n]),(0,r.useEffect)(()=>{let e,n=t.current;if(!n)return;let o=n.clientWidth,r=n.clientHeight,l=new a.Z58,u=new a.qUd(-1,1,1,-1,0,1),d=new s.JeP({alpha:!0});d.setSize(o,r),n.appendChild(d.domElement);let c={uTime:{value:0},uProgress:{value:0},uResolution:{value:new a.I9Y(o,r)}},h=new a.BKk({uniforms:c,vertexShader:"\n        void main() {\n          gl_Position = vec4(position, 1.0);\n        }\n      ",fragmentShader:'\n        precision highp float;\n        uniform float uTime;\n        uniform float uProgress;\n        uniform vec2 uResolution;\n\n        // Psuedo-random number generator\n        float rand(vec2 co){\n          return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n        }\n\n        void main() {\n          vec2 uv = gl_FragCoord.xy / uResolution.xy;\n          vec2 center = vec2(0.5);\n          vec2 delta = uv - center;\n          \n          float dist = length(delta);\n          float angle = atan(delta.y, delta.x);\n\n          // 1. Orbital Velocity & Gravitational Pull\n          // Base velocity: inner matter moves faster\n          angle -= (uTime * 0.3) / dist;\n          // The "pull" on hover: an intense, exponential swirl\n          angle += uProgress * 20.0 * exp(-dist * 5.0);\n\n          // Apply the calculated swirl to the coordinates\n          vec2 swirl_uv = center + dist * vec2(cos(angle), sin(angle));\n\n          // 2. Create the Accretion Disk (glowing matter)\n          // Generate a field of random "stars" or "gas"\n          float stars = rand(floor(swirl_uv * 300.0));\n          \n          // Shape the disk into a bright band and add a soft edge\n          float disk_shape = smoothstep(0.1, 0.12, dist) * smoothstep(0.4, 0.2, dist);\n          stars *= disk_shape;\n          stars = pow(stars, 25.0); // Make only the brightest points shine through\n\n          // 3. Define the Color and Event Horizon (black center)\n          vec3 color = vec3(1.0, 0.7, 0.3) * stars; // Fiery orange color\n          \n          // Fade in the entire effect with uProgress\n          color *= uProgress;\n\n          // Carve out the black hole at the center\n          color *= smoothstep(0.09, 0.1, dist);\n\n          // 4. Final Output\n          float alpha = pow(length(color), 0.5); // Use color intensity for alpha\n          gl_FragColor = vec4(color, alpha);\n        }\n      ',transparent:!0}),v=new a.bdM(2,2),f=new a.eaF(v,h);l.add(f);let p=new a.zD7,g=()=>{c.uTime.value=p.getElapsedTime(),c.uProgress.value+=i.current?.02:-.03,c.uProgress.value=a.cj9.clamp(c.uProgress.value,0,1),d.render(l,u),e=requestAnimationFrame(g)};g();let m=()=>{if(!n)return;let e=n.clientWidth,t=n.clientHeight;d.setSize(e,t),c.uResolution.value.set(e,t)};return window.addEventListener("resize",m),()=>{cancelAnimationFrame(e),window.removeEventListener("resize",m),d.dispose(),h.dispose(),v.dispose(),n&&n.removeChild(d.domElement)}},[]),(0,o.jsx)("div",{ref:t,style:{position:"absolute",inset:0,pointerEvents:"none",zIndex:1}})}}}]);